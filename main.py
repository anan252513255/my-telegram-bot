import os
import json
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# C·∫•u h√¨nh
TOKEN = os.getenv("TELEGRAM_TOKEN")
DATA_FILE = "data.json"

# Kh·ªüi t·∫°o file d·ªØ li·ªáu n·∫øu ch∆∞a c√≥
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w") as f:
        json.dump({"transactions": []}, f)

# --- H√†m x·ª≠ l√Ω d·ªØ li·ªáu ---
def load_data():
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

# --- Command Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí∞ **Bot Qu·∫£n L√Ω Chi Ti√™u**\n\n"
        "C√°c l·ªánh h·ªó tr·ª£:\n"
        "/add <s·ªë_ti·ªÅn> <m√¥_t·∫£> - Th√™m chi ti√™u\n"
        "/report - Xem t·ªïng chi h√¥m nay\n"
        "/report <ng√†y> - Xem chi ti·∫øt theo ng√†y (VD: /report 2025-07-23)"
    )

async def add_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if len(args) < 2:
            await update.message.reply_text("‚ö†Ô∏è Sai c√∫ ph√°p. V√≠ d·ª•: /add 50000 c∆°m tr∆∞a")
            return

        amount = float(args[0])
        description = " ".join(args[1:])
        today = datetime.now().strftime("%Y-%m-%d")

        data = load_data()
        data["transactions"].append({
            "date": today,
            "amount": amount,
            "description": description
        })
        save_data(data)

        await update.message.reply_text(
            f"‚úÖ ƒê√£ th√™m {amount:,.0f}ƒë cho: {description}\n"
            f"üìÖ Ng√†y: {today}"
        )

    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è S·ªë ti·ªÅn ph·∫£i l√† gi√° tr·ªã s·ªë!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói: {str(e)}")

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        date_filter = datetime.now().strftime("%Y-%m-%d") if not args else args[0]

        data = load_data()
        filtered = [t for t in data["transactions"] if t["date"] == date_filter]
        total = sum(t["amount"] for t in filtered)

        report_text = (
            f"üìä B√°o c√°o ng√†y {date_filter}\n"
            f"----------------------------\n"
            f"‚Ä¢ T·ªïng chi: {total:,.0f}ƒë\n"
            f"‚Ä¢ S·ªë giao d·ªãch: {len(filtered)}\n\n"
        )

        for idx, t in enumerate(filtered, 1):
            report_text += f"{idx}. {t['description']}: {t['amount']:,.0f}ƒë\n"

        await update.message.reply_text(report_text if filtered else "üìå Kh√¥ng c√≥ d·ªØ li·ªáu")

    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói: {str(e)}")

# --- Kh·ªüi ch·∫°y Bot ---
def main():
    app = Application.builder().token(TOKEN).build()
    
    # ƒêƒÉng k√Ω commands
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_expense))
    app.add_handler(CommandHandler("report", report))

    print("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
